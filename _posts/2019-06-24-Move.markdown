---
layout: post
title: "std::move非移动，std::forward亦无为"
data: 2019-06-24 12:35:29
catagories: C++
excerpt: 解开移动语义最神秘的面纱
---

![concept](https://i.loli.net/2019/06/25/5d11da51a34a747280.jpg)

C++11加入了移动语意和完美转发这两个迷人的特性。前者使得使用移动来代替拷贝变得可能，后者使得函数模板可以接受任意类型的参数并且原封不动的传递它们。

其中有两个"灵魂"方法：std::move和std::forward。但是，std::move没有移动任何东西，std::forward同样也没有做任何传递动作。惊了！！这到底是怎么一回事呢？接下来就有我撕开他们朦胧的面纱

## std::move
话不多说，直接上std::move在C++11中的实现
```C++
template<typename T>
typename std::remove_reference<T>::type&&
move (T&& param) {
    using ReturnType = typename remove_reference<T>::type&&;
    return static_cast<ReturnType>(param);
}
``` 
可以看出，std::move本质就是static_cast，并没有对param的内容做出任何改变，也没有看到任何移动的痕迹。那么它为什么能叫std::move，具体的移动又是怎么产生的呢？
上代码
```C++
class A; //实现了移动构造函数和一个返回值为A的函数A get_rvalue_A();
A from_xvalue(get_rvalue_A());
A lvalue_a;
A from_move(std::move(lvalue_a));
```
from_xvalue和from_move两个实例均会调用A的移动构造函数进行构建，两者的区别在于get_rvalue_A()本身就是一个右值([value condition](http://www.baidu.com))，lvalue_a是一个左值，通过std::move(lvalue_a)将其转化为一个右值。

于是这里就引出了std::move的真正作用：**型别转换**。std::move并不进行任何移动操作，甚至也不保证move后的变量可移动，只是保证经过std::move的值为右值。真正实现移动操作的是移动构造函数或者其他参数为右值引用/万能应用的方法，std::move存在的意义仅仅在于改变参数的值使之能够正确的match这些方法。

## std::forward

那么std::forward又是何方神圣呢？

要整明白std::forward，首先我们要明确两个概念：value type和value category。value type就是我们常说的变量类型，int, double, string 等等等等这些属于变量的类型；value category是[值类别](https://zh.cppreference.com/w/cpp/language/value_category)，左值、右值、纯右值、将亡值、泛左值这些都属于变量的值类别(名字确实有点儿拗口)。看起来泾渭分明的两个概念，但右值和右值引用这两个概念确易让人混淆。一旦着了道，那后续所有概念都是一团浆糊。

右值引用跟右值的关系就像印度和印度尼西亚一样！！

在某些情况下，我们需要进行转发，将本身为左值的右值引用转化为右值，从而继续按照原定的愿景进行传递。在非函数模板中，使用std::move.

在函数模板中存在另外一种情况。当涉及到参数推到的时候，T&&类型代表左值还是右值是由参数本身决定的。在这种情况下我们希望针对由左值初始化的参数，按照左值传递。右值初始化的参数按照右值传递。std::forward能够帮助我们实现这个需求。

先看代码

	template< class T >
	T&& forward(typename std::remove_reference<T>::type& t) noexcept {
		return static_cast<T&&>(t);
	}
	template< class T >
	T&& forward( typename std::remove_reference<T>::type&& t) noexecpet {
		static_assert(!std::is_lvalue_reference<T>::value, "template argument substituing T is an lvalue reference type")
	}

std::move也是一个static_cast，只做了型别转换没有任何看起来像转发的动作。惊了！这到底是怎么一回事？同样是static_cast，std::move跟std::forward有什么区别？

在讲分析这个问题之前，我们需要补充另外一个知识点：引用折叠。按照字面意思来解释，应用折叠就是当模板函数推到时出现引用的引用时编译器的处理机制。万能引用(T&&)会根据传入参数值类型不通推到出不通的结果，当T被推到为引用类型时，T&&的推到就用到了[引用折叠](https://en.cppreference.com/w/cpp/utility/forward).

理解了值类型以及引用折叠后，forward的作用就显而易见了，将模板函数中参数原封不动(类型+值类型)传递下去，其实现原理也是通过static_cast。具体的实现过程我相信看到这儿的你肯定能够推到出来。


## 总结
c++11实现移动语意的方式咋一看很简单，仔细了解下来又觉得蛮复杂，完全理解之后则会赞叹这个设计的巧妙。
